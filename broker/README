xml-broker -- a small java-servlet to distribute xml-events to registered web-services

--	HTTP-Streaming 
	currently I am working on a way to stream events to endpoint services. This requires 
	to hold on to a connection for as long as possible. Usually tomcat etc have a very strict
	Connection timeout set. If you like to play around with streaming first increase the
	respective setting for your servlet container. For a streaming connection to work, the
	service should be able to recieve several xml-root-elements from the same stream. For the
	logging-service a sample StreamFilter is implemented, that splits the stream into several
	parts (this implementation should be redone properly to support comments, processing 
	instructions and CDATA elements... but implementing a basic working xml-parser that knows
	when a root-element ends is big task.. and since PIs and comments can stand in front and 
	behind the root-element some restrictions have to be added...). Currently pooled streaming-
	connections are not automatically closed. Management is left to the container issuing
	timeouts etc.. still there is currently no way to find out if a connection timed out on
	the endpoints side. Thus some events will be lost during reconnection!
	
--	maven
	to deploy to out server just use "mvn tomcat:deploy" .. for this to work you have to insert
	the necessary credentials in your ~/.m2/settings.xml file. When installing maven this file
	usually does not exist. Just create it with the following content:
	<settings>
	  <servers>
	    <server>
	      <id>mytomcat</id>
	      <username>XXXXXX</username>
	      <password>XXXXXX</password>
	    </server>
	  </servers>
	</settings>
	the username and password can be found on the server inside TOMCAT_DIR/conf/tomcat-users.xml
	
	If you just like to get a .war file, simply use "mvn package". The file can be found at
	target/broker.war